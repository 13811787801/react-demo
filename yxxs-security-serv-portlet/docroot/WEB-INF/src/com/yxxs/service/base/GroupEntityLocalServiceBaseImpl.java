/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or modify it under the terms of the
 * GNU Lesser General Public License as published by the Free Software Foundation; either version
 * 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 */

package com.yxxs.service.base;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;

import com.yxxs.model.GroupEntity;

import com.yxxs.service.GroupEntityLocalService;
import com.yxxs.service.persistence.GroupEntityPersistence;
import com.yxxs.service.persistence.GroupEntityPersistenceImpl;
import com.yxxs.service.persistence.GroupPrivilegeEntityPersistence;
import com.yxxs.service.persistence.GroupPrivilegeEntityPersistenceImpl;
import com.yxxs.service.persistence.PrivilegeItemEntityPersistence;
import com.yxxs.service.persistence.PrivilegeItemEntityPersistenceImpl;
import com.yxxs.service.persistence.UserGroupEntityPersistence;
import com.yxxs.service.persistence.UserGroupEntityPersistenceImpl;
import com.yxxs.service.persistence.UserPrivilegeEntityPersistence;
import com.yxxs.service.persistence.UserPrivilegeEntityPersistenceImpl;

import java.util.List;

/**
 * The base implementation of the group entity local service.
 * 
 * <p>
 * This implementation exists only as a container for the default service methods generated by
 * ServiceBuilder. All custom service methods should be put in
 * {@link com.yxxs.service.impl.GroupEntityLocalServiceImpl}.
 * </p>
 * 
 * @author Administrator
 * @see com.yxxs.service.impl.GroupEntityLocalServiceImpl
 * @see com.yxxs.service.GroupEntityLocalServiceUtil
 * @generated
 */
public abstract class GroupEntityLocalServiceBaseImpl implements GroupEntityLocalService {
  /*
   * NOTE FOR DEVELOPERS:
   * 
   * Never modify or reference this class directly. Always use {@link
   * com.yxxs.service.GroupEntityLocalServiceUtil} to access the group entity local service.
   */

  /**
   * Adds the group entity to the database. Also notifies the appropriate model listeners.
   * 
   * @param groupEntity the group entity
   * @return the group entity that was added
   * @throws SystemException if a system exception occurred
   */
  public GroupEntity addGroupEntity(GroupEntity groupEntity) throws SystemException {
    groupEntity.setNew(true);

    groupEntity = groupEntityPersistence.update(groupEntity);

    return groupEntity;
  }

  /**
   * Creates a new group entity with the primary key. Does not add the group entity to the database.
   * 
   * @param id the primary key for the new group entity
   * @return the new group entity
   */
  public GroupEntity createGroupEntity(long id) {
    return groupEntityPersistence.create(id);
  }

  /**
   * Deletes the group entity with the primary key from the database. Also notifies the appropriate
   * model listeners.
   * 
   * @param id the primary key of the group entity
   * @throws PortalException if a group entity with the primary key could not be found
   * @throws SystemException if a system exception occurred
   */
  public void deleteGroupEntity(long id) throws PortalException, SystemException {
    GroupEntity groupEntity = groupEntityPersistence.remove(id);
  }

  /**
   * Deletes the group entity from the database. Also notifies the appropriate model listeners.
   * 
   * @param groupEntity the group entity
   * @throws SystemException if a system exception occurred
   */
  public void deleteGroupEntity(GroupEntity groupEntity) throws SystemException {
    groupEntityPersistence.remove(groupEntity);
  }

  public GroupEntity fetchGroupEntity(long id) throws SystemException {
    return groupEntityPersistence.fetchByPrimaryKey(id);
  }

  /**
   * Returns the group entity with the primary key.
   * 
   * @param id the primary key of the group entity
   * @return the group entity
   * @throws PortalException if a group entity with the primary key could not be found
   * @throws SystemException if a system exception occurred
   */
  public GroupEntity getGroupEntity(long id) throws PortalException, SystemException {
    return groupEntityPersistence.findByPrimaryKey(id);
  }

  /**
   * Returns a range of all the group entities.
   * 
   * <p>
   * Useful when paginating results. Returns a maximum of <code>end - start</code> instances.
   * <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result
   * set. Thus, <code>0</code> refers to the first result in the set. Setting both
   * <code>start</code> and <code>end</code> to
   * {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
   * </p>
   * 
   * @param start the lower bound of the range of group entities
   * @param end the upper bound of the range of group entities (not inclusive)
   * @return the range of group entities
   * @throws SystemException if a system exception occurred
   */
  public List<GroupEntity> getGroupEntities(int start, int end) throws SystemException {
    return groupEntityPersistence.findAll(start, end);
  }

  /**
   * Returns the number of group entities.
   * 
   * @return the number of group entities
   * @throws SystemException if a system exception occurred
   */
  public int getGroupEntitiesCount() throws SystemException {
    return groupEntityPersistence.countAll();
  }

  /**
   * Updates the group entity in the database or adds it if it does not yet exist. Also notifies the
   * appropriate model listeners.
   * 
   * @param groupEntity the group entity
   * @param merge whether to merge the group entity with the current session. See
   *        {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)}
   *        for an explanation.
   * @return the group entity that was updated
   * @throws SystemException if a system exception occurred
   */
  public GroupEntity updateGroupEntity(GroupEntity groupEntity) throws SystemException {
    groupEntity = groupEntityPersistence.update(groupEntity);

    return groupEntity;
  }

  /**
   * Returns the group entity persistence.
   * 
   * @return the group entity persistence
   */
  public GroupEntityPersistence getGroupEntityPersistence() {
    return groupEntityPersistence;
  }

  /**
   * Sets the group entity persistence.
   * 
   * @param groupEntityPersistence the group entity persistence
   */

  /**
   * Returns the group privilege entity persistence.
   * 
   * @return the group privilege entity persistence
   */
  public GroupPrivilegeEntityPersistence getGroupPrivilegeEntityPersistence() {
    return groupPrivilegeEntityPersistence;
  }

  /**
   * Sets the group privilege entity persistence.
   * 
   * @param groupPrivilegeEntityPersistence the group privilege entity persistence
   */

  /**
   * Returns the privilege item entity persistence.
   * 
   * @return the privilege item entity persistence
   */
  public PrivilegeItemEntityPersistence getPrivilegeItemEntityPersistence() {
    return privilegeItemEntityPersistence;
  }

  /**
   * Sets the privilege item entity persistence.
   * 
   * @param privilegeItemEntityPersistence the privilege item entity persistence
   */

  /**
   * Returns the user group entity persistence.
   * 
   * @return the user group entity persistence
   */
  public UserGroupEntityPersistence getUserGroupEntityPersistence() {
    return userGroupEntityPersistence;
  }

  /**
   * Sets the user group entity persistence.
   * 
   * @param userGroupEntityPersistence the user group entity persistence
   */

  /**
   * Returns the user privilege entity persistence.
   * 
   * @return the user privilege entity persistence
   */
  public UserPrivilegeEntityPersistence getUserPrivilegeEntityPersistence() {
    return userPrivilegeEntityPersistence;
  }

  /**
   * Sets the user privilege entity persistence.
   * 
   * @param userPrivilegeEntityPersistence the user privilege entity persistence
   */
  public void afterPropertiesSet() {}

  public void destroy() {}

  protected Class<?> getModelClass() {
    return GroupEntity.class;
  }

  protected String getModelClassName() {
    return GroupEntity.class.getName();
  }

  protected GroupEntityPersistence groupEntityPersistence = new GroupEntityPersistenceImpl();
  protected GroupPrivilegeEntityPersistence groupPrivilegeEntityPersistence =
      new GroupPrivilegeEntityPersistenceImpl();
  protected PrivilegeItemEntityPersistence privilegeItemEntityPersistence =
      new PrivilegeItemEntityPersistenceImpl();
  protected UserGroupEntityPersistence userGroupEntityPersistence =
      new UserGroupEntityPersistenceImpl();
  protected UserPrivilegeEntityPersistence userPrivilegeEntityPersistence =
      new UserPrivilegeEntityPersistenceImpl();
  private static Log _log = LogFactoryUtil.getLog(GroupEntityLocalServiceBaseImpl.class);
}
